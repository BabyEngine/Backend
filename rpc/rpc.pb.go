// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GRPCRequest struct {
	Action               string   `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GRPCRequest) Reset()         { *m = GRPCRequest{} }
func (m *GRPCRequest) String() string { return proto.CompactTextString(m) }
func (*GRPCRequest) ProtoMessage()    {}
func (*GRPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *GRPCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GRPCRequest.Unmarshal(m, b)
}
func (m *GRPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GRPCRequest.Marshal(b, m, deterministic)
}
func (m *GRPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCRequest.Merge(m, src)
}
func (m *GRPCRequest) XXX_Size() int {
	return xxx_messageInfo_GRPCRequest.Size(m)
}
func (m *GRPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCRequest proto.InternalMessageInfo

func (m *GRPCRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *GRPCRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GRPCResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GRPCResponse) Reset()         { *m = GRPCResponse{} }
func (m *GRPCResponse) String() string { return proto.CompactTextString(m) }
func (*GRPCResponse) ProtoMessage()    {}
func (*GRPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *GRPCResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GRPCResponse.Unmarshal(m, b)
}
func (m *GRPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GRPCResponse.Marshal(b, m, deterministic)
}
func (m *GRPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCResponse.Merge(m, src)
}
func (m *GRPCResponse) XXX_Size() int {
	return xxx_messageInfo_GRPCResponse.Size(m)
}
func (m *GRPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCResponse proto.InternalMessageInfo

func (m *GRPCResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GRPCResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GRPCRequest)(nil), "GRPCRequest")
	proto.RegisterType((*GRPCResponse)(nil), "GRPCResponse")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xb2, 0xe4, 0xe2, 0x76, 0x0f, 0x0a, 0x70, 0x0e, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0x4b, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0x93, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25,
	0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x25, 0x33, 0x2e, 0x1e, 0x88, 0xd6, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0x90, 0x9a, 0xe4, 0xfc, 0x94, 0x54, 0xb0, 0x4e, 0xd6, 0x20, 0x30, 0x1b,
	0x9b, 0x3e, 0x23, 0x13, 0x88, 0x95, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xaa, 0x5c,
	0x2c, 0xce, 0x89, 0x39, 0x39, 0x42, 0x3c, 0x7a, 0x48, 0x0e, 0x91, 0xe2, 0xd5, 0x43, 0x36, 0x5b,
	0x89, 0x21, 0x89, 0x0d, 0xec, 0x5e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x83, 0x1e,
	0x17, 0xbc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GRPCServiceClient is the client API for GRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCServiceClient interface {
	//rpc Send (stream GRPCRequest) returns (stream GRPCResponse) {}
	Call(ctx context.Context, in *GRPCRequest, opts ...grpc.CallOption) (*GRPCResponse, error)
}

type gRPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewGRPCServiceClient(cc *grpc.ClientConn) GRPCServiceClient {
	return &gRPCServiceClient{cc}
}

func (c *gRPCServiceClient) Call(ctx context.Context, in *GRPCRequest, opts ...grpc.CallOption) (*GRPCResponse, error) {
	out := new(GRPCResponse)
	err := c.cc.Invoke(ctx, "/GRPCService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCServiceServer is the server API for GRPCService service.
type GRPCServiceServer interface {
	//rpc Send (stream GRPCRequest) returns (stream GRPCResponse) {}
	Call(context.Context, *GRPCRequest) (*GRPCResponse, error)
}

// UnimplementedGRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCServiceServer struct {
}

func (*UnimplementedGRPCServiceServer) Call(ctx context.Context, req *GRPCRequest) (*GRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}

func RegisterGRPCServiceServer(s *grpc.Server, srv GRPCServiceServer) {
	s.RegisterService(&_GRPCService_serviceDesc, srv)
}

func _GRPCService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).Call(ctx, req.(*GRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GRPCService",
	HandlerType: (*GRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _GRPCService_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
